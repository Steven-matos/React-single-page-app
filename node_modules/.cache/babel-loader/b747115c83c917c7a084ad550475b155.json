{"ast":null,"code":"import _classCallCheck from \"/Users/steven/Documents/GitHub/react-app-v2/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/steven/Documents/GitHub/react-app-v2/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/steven/Documents/GitHub/react-app-v2/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/steven/Documents/GitHub/react-app-v2/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/steven/Documents/GitHub/react-app-v2/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/steven/Documents/GitHub/react-app-v2/src/components/Stopwatch.js\";\nimport React, { Component } from 'react';\n\nvar Stopwatch =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Stopwatch, _Component);\n\n  function Stopwatch() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Stopwatch);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Stopwatch)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      isRunning: false,\n      elapsedTime: 0,\n      previousTime: 0\n    };\n\n    _this.tick = function () {\n      if (_this.state.isRunning) {\n        var now = Date.now();\n\n        _this.setState(function (prevState) {\n          return {\n            previousTime: now,\n            elapsedTime: prevState.elapsedTime + (now - _this.state.previousTime)\n          };\n        });\n      }\n    };\n\n    _this.handleStopwatch = function () {\n      _this.setState(function (prevState) {\n        return {\n          isRunning: !prevState.isRunning\n        };\n      });\n\n      if (!_this.state.isRunning) {\n        _this.setState({\n          previousTime: Date.now()\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(Stopwatch, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.intervalID = setInterval(function () {\n        return _this2.tick();\n      }, 100);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var seconds = Math.floor(this.state.elapsedTime / 1000);\n      return React.createElement(\"div\", {\n        className: \"stopwatch\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, \"Stopwatch\"), React.createElement(\"span\", {\n        className: \"stopwatch-time\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, Math.floor(this.state.elapsedTime / 1000)), React.createElement(\"button\", {\n        onClick: this.handleStopwatch,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, this.state.isRunning ? 'Stop' : 'Start'), React.createElement(\"button\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, \"Reset\"));\n    }\n  }]);\n\n  return Stopwatch;\n}(Component);\n\nexport default Stopwatch;","map":{"version":3,"sources":["/Users/steven/Documents/GitHub/react-app-v2/src/components/Stopwatch.js"],"names":["React","Component","Stopwatch","state","isRunning","elapsedTime","previousTime","tick","now","Date","setState","prevState","handleStopwatch","intervalID","setInterval","seconds","Math","floor"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;IAEMC,S;;;;;;;;;;;;;;;;;UAEJC,K,GAAQ;AACNC,MAAAA,SAAS,EAAE,KADL;AAENC,MAAAA,WAAW,EAAE,CAFP;AAGNC,MAAAA,YAAY,EAAE;AAHR,K;;UAURC,I,GAAO,YAAM;AACX,UAAI,MAAKJ,KAAL,CAAWC,SAAf,EAAyB;AACvB,YAAMI,GAAG,GAAGC,IAAI,CAACD,GAAL,EAAZ;;AACA,cAAKE,QAAL,CAAe,UAAAC,SAAS;AAAA,iBAAK;AAC3BL,YAAAA,YAAY,EAAEE,GADa;AAE3BH,YAAAA,WAAW,EAAEM,SAAS,CAACN,WAAV,IAAyBG,GAAG,GAAG,MAAKL,KAAL,CAAWG,YAA1C;AAFc,WAAL;AAAA,SAAxB;AAID;AACF,K;;UAEDM,e,GAAkB,YAAM;AACtB,YAAKF,QAAL,CAAe,UAAAC,SAAS;AAAA,eAAK;AAC3BP,UAAAA,SAAS,EAAE,CAACO,SAAS,CAACP;AADK,SAAL;AAAA,OAAxB;;AAGA,UAAI,CAAC,MAAKD,KAAL,CAAWC,SAAhB,EAA2B;AACzB,cAAKM,QAAL,CAAc;AAACJ,UAAAA,YAAY,EAAEG,IAAI,CAACD,GAAL;AAAf,SAAd;AACD;AACF,K;;;;;;;wCArBkB;AAAA;;AACjB,WAAKK,UAAL,GAAkBC,WAAW,CAAC;AAAA,eAAM,MAAI,CAACP,IAAL,EAAN;AAAA,OAAD,EAAoB,GAApB,CAA7B;AACD;;;6BAqBO;AACN,UAAMQ,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAW,KAAKd,KAAL,CAAWE,WAAX,GAAyB,IAApC,CAAhB;AAEA,aACE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEE;AAAM,QAAA,SAAS,EAAC,gBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACEW,IAAI,CAACC,KAAL,CAAW,KAAKd,KAAL,CAAWE,WAAX,GAAyB,IAApC,CADF,CAFF,EAKE;AAAQ,QAAA,OAAO,EAAE,KAAKO,eAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKT,KAAL,CAAWC,SAAX,GAAuB,MAAvB,GAAgC,OADnC,CALF,EAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBARF,CADF;AAaD;;;;EA/CqBH,S;;AAqDxB,eAAeC,SAAf","sourcesContent":["import React, { Component } from 'react';\n\nclass Stopwatch extends Component {\n\n  state = {\n    isRunning: false,\n    elapsedTime: 0,\n    previousTime: 0\n  }\n\n  componentDidMount(){\n    this.intervalID = setInterval(() => this.tick(), 100);\n  }\n\n  tick = () => {\n    if (this.state.isRunning){\n      const now = Date.now();\n      this.setState( prevState => ({\n        previousTime: now,\n        elapsedTime: prevState.elapsedTime + (now - this.state.previousTime)\n      }));\n    }\n  }\n\n  handleStopwatch = () => {\n    this.setState( prevState => ({\n      isRunning: !prevState.isRunning\n    }));\n    if (!this.state.isRunning) {\n      this.setState({previousTime: Date.now()})\n    }\n  }\n\n  render(){\n    const seconds = Math.floor(this.state.elapsedTime / 1000) \n\n    return(\n      <div className=\"stopwatch\">\n        <h2>Stopwatch</h2>\n        <span className=\"stopwatch-time\">\n        { Math.floor(this.state.elapsedTime / 1000) }\n        </span>\n        <button onClick={this.handleStopwatch}>\n          {this.state.isRunning ? 'Stop' : 'Start'}\n        </button>\n        <button>Reset</button>\n      </div>\n\n    );\n  }\n}\n\n\n\n\nexport default Stopwatch;\n"]},"metadata":{},"sourceType":"module"}